1. 对称加密和非对称加密：
对称加密安全性问题，密钥容易泄露
非对称加密性能较低，密钥方便管理

2. https解决方案
数据（size大） - 对称加密 - 密钥不公开 - 如何传递密钥？
密钥（size小） - 非对称加密（安全） - 服务器解出密钥，再去解密数据

3. 设置有效期
登录场景 - 黑客截获报文，获得加密的用户名密码 - 黑客用密文构造报文，也能登录，如何解决？
用（密码+时间）再加密，或者再加密第三个字段时间戳 - 服务器校验时间戳是否过期（多少分钟内）- 黑客无法伪造时间戳的密文，黑客使用截获的密文时间戳会过期

4. 黑名单
服务器将客户端生成的密文保存起来 - 用过了，不能重复用 - 性能取舍

5. 签名
MD5加签：sign = （加签字段+salt） |  验签：加签（加签字段+salt）== sign？
如果不加盐，黑客可以自己伪造sign（salt相当于key）

6. 身份认证 - 如何判断登录状态？
1）客户端登录后，收到服务器发送的一个token，存在cache中。客户端发送每个请求都携带token。
服务器收到请求时，判断token是否在token set中，如果查无token，表示该请求未登录/登录过期。
token设置有效期。
2）缺点：每个业务接口都要扩展一个token参数。对业务的侵入性非常大。怎么办？
解决：拦截器 cookie-session联动机制
服务器将token种入客户端的cookie，每次发请求隐式携带cookie。
3）cookie底层是什么？cookie = 特殊的header，服务器写header需要前端js配合，cookie省去了这个过程。

4）如何防范抓包cookie，伪造 token 和 请求？
cookie存session_id(或token) 设置过期时间。
服务端校验设备指纹（新设备）、网络ip（异地登录）等。重要信息（如涉及钱）会要求短信验证码。

5）sessionid和token的区别
session能存数据，占空间；token不存数据，只做身份校验，解决某些场景不需要或者不能够有session对象的问题。

共同点：都是保存了用户身份信息，都有过期时间。
session翻译为会话，token翻译为令牌。
session是空间换时间，token是时间换空间。
session和sessionid：服务器会保存一份，可能保存到缓存/数据库/文件。
token：服务器不需要记录任何东西，每次都是一个无状态的请求，每次都是通过解密来验证是否合法。
sessionid：一般是随机字符串，要到**服务器检索id的有效性。**出现请求：服务器重启饿内存中的session没了，数据库服务器挂了。




